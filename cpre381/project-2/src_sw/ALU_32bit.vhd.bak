-------------------------------------------------------------------------
-- Riley Lawson
-- Department of Electrical and Computer Engineering
-- Iowa State University
-------------------------------------------------------------------------


-- ALU_32bit.vhd
-------------------------------------------------------------------------
-- DESCRIPTION: This file contain 32 bit ALU
-- implementation.

-- 11/04/2021 by RL:: Created 32 bit ALU
-------------------------------------------------------------------------


library IEEE;
use IEEE.std_logic_1164.all;

entity ALU_32bit is
   port(i_D0		        : in std_logic_vector(31 downto 0);
        i_D1                : in std_logic_vector(31 downto 0);
        i_D2                : in std_logic_vector(2 downto 0); --op
        o_O                 : out std_logic_vector(31 downto 0); --out
        o_C                 : out std_logic; --out
        o_Overflow          : out std_logic;
        no                  : out std_logic); --zero
end ALU_32bit;

architecture structural of ALU_32bit is

component fullAdder_32bit is
   generic(N : integer := 32);
   port(i_D0 : in std_logic_vector(N-1 downto 0);
       i_D1 : in std_logic_vector(N-1 downto 0);
       i_D2 : in std_logic;
       o_S  : out std_logic_vector(N-1 downto 0); --sum
       o_D  : out std_logic;
       o_D2 : out std_logic); --overflow carry
end component;

component and_32bit_data is
   port(i_D0     : in std_logic_vector(31 downto 0);
        i_D1     : in std_logic_vector(31 downto 0);
        o_O      : out std_logic_vector(31 downto 0));
end component;

component or_32bit_data is
   port(i_D0     : in std_logic_vector(31 downto 0);
        i_D1     : in std_logic_vector(31 downto 0);
        o_O      : out std_logic_vector(31 downto 0));
end component;

component nand_32bit_data is
   port(i_D0     : in std_logic_vector(31 downto 0);
        i_D1     : in std_logic_vector(31 downto 0);
        o_O      : out std_logic_vector(31 downto 0));
end component;

component nor_32bit_data is
   port(i_D0     : in std_logic_vector(31 downto 0);
        i_D1     : in std_logic_vector(31 downto 0);
        o_O      : out std_logic_vector(31 downto 0));
end component;

component xor_32bit_data is
   port(i_D0     : in std_logic_vector(31 downto 0);
        i_D1     : in std_logic_vector(31 downto 0);
        o_O      : out std_logic_vector(31 downto 0));
end component;

component xor2 is
   port(i_D0     : in std_logic;
        i_D1     : in std_logic;
        o_O      : out std_logic);
end component;

--FIXME
component norg32 is
   port(i_D0     : in std_logic_vector(31 downto 0);
        o_O     : out std_logic);
end component;

component mux32_8_1 is
port(	  i_A            : in std_logic_vector(31 downto 0);
          i_B 	         : in std_logic_vector(31 downto 0);
          i_C            : in std_logic_vector(31 downto 0);
          i_D            : in std_logic_vector(31 downto 0);
          i_E	         : in std_logic_vector(31 downto 0);
          i_F	         : in std_logic_vector(31 downto 0);
          i_G	         : in std_logic_vector(31 downto 0);
          i_H	         : in std_logic_vector(31 downto 0);
          i_S			 : std_logic_vector(2 downto 0);
          o_O			 : out std_logic_vector(31 downto 0));
end component;


signal s_D0	             : std_logic_vector(31 downto 0);
signal s_D1              : std_logic_vector(31 downto 0);
signal s_and	         : std_logic_vector(31 downto 0);
signal s_nand            : std_logic_vector(31 downto 0);
signal s_or	             : std_logic_vector(31 downto 0);
signal s_nor	         : std_logic_vector(31 downto 0);
signal s_xor	         : std_logic_vector(31 downto 0);
signal s_slt	         : std_logic_vector(31 downto 0);
signal s_S               : std_logic_vector(31 downto 0);

signal s_Overflow		 : std_logic;
signal s_C_out			 : std_logic;
signal s_C_out_1		 : std_logic;

begin

M1: for i in 0 to 31 generate
        s_D0(i) <= i_D2(0);
    end generate;

generic_32bit_fullAdder : fullAdder_32bit
port map(i_D0 => i_D0,
         i_D1 => s_D1,
         i_D2 => i_D2(0),
         o_D => s_C_out,
         o_D2 => s_C_out_1,
         o_S => s_S);

    o_C <= s_C_out;

generic_32bit_mux : mux32_8_1
port map(i_A => s_S,
         i_B => s_S,
         i_C => s_and,
         i_D => s_slt,
         i_E => s_or,
         i_F => s_xor,
         i_G => s_nand,
         i_H => s_nor,
         i_S => i_D2,
         o_O => o_O);

generic_2bit_xor : xorg2
port map(i_D0 => s_C_out,
         i_D1 => s_C_out_1,
         o_O => s_Overflow);

    o_Overflow <= s_Overflow;

generic_2bit_xor_1 : xorg2
port map(i_D0 => s_S(31),
         i_D1 => s_Overflow,
         o_O => s_slt(0));

M2: for i in 1 to 31 generate
        s_slt(i) <= '0';
    end generate;


--Dataflow
generic_32bit_xor : xor_32bit_data
port map(i_D0 => s_D0,
         i_D1 => i_D1,
         o_O => s_D1);

--Dataflow
generic_32bit_xor_1 : xor_32bit_data
port map(i_D0 => i_D0,
         i_D1 => i_D1,
         o_O  => s_xor);

--Dataflow
generic_32bit_and : and_32bit_data
port map(i_D0 => i_D0,
         i_D1 => i_D1,
         o_O => s_and);

--Dataflow
generic_32bit_nand : nand_32bit_data
port map(i_D0 => i_D0,
         i_D1 => i_D1,
         o_O  => s_nand);

--Dataflow
generic_32bit_or : xor_32bit_data
port map(i_D0 => i_D0,
         i_D1 => i_D1,
         o_O  => s_or);

--Dataflow
--FIXME
generic_32bit_or_1 : norg32
port map(i_D0 => s_S,
         o_O  => no);

--Dataflow
generic_32bit_nor : nor_32bit_data
port map(i_D0 => i_D0,
         i_D1 => i_D1,
         o_O  => s_nor);


end structural;
